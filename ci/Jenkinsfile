#! groovy

//
// pull-request/Jenkinsfile - Jenkins script for initiating the zing-cassandra microservice build
//
//  output files
//  version.yml         - docker-compose file that describes the version of the image to test
//

MAKE='make -f Makefile -f ci.mk'

node('docker') {
    currentBuild.displayName = "PR #${env.ghprbPullId}@${env.NODE_NAME}"
    configFileProvider([
        configFile(fileId: 'global', variable: 'GLOBAL'),
    ]) {
        global = load env.GLOBAL
    }

    checkout scm
    SHA=sh(script: 'git rev-parse --short=8 HEAD', returnStdout: true).trim()

	withEnv([
		"IMAGE_TAG=${SHA}",
		"PROJECT_NAME=cassandra-${env.BUILD_NUMBER}"]) {
		try	{
			stage('Run service tests') {
				sh("${MAKE} unit-test JENKINS_WORKSPACE=${env.WORKSPACE}")
			}

			stage('Build service image') {
				sh("${MAKE} build")
			}

			stage('Run service api tests') {
				sh("${MAKE} api-test")
			}
		} finally {
			stage ('Clean test environment') {
				sh("${MAKE} ci-clean")
			}
		}

		stage('Publish image') {
			def pubSteps = [:]
			for (int i = 0; i < global.PUBLISHERS.size(); i++) {
				def repo = "${global.PUBLISHERS[i]}"
				def stepName  = "publishing image to [${[i]}] ${repo}"
				pubSteps[stepName] = {
					sh("${MAKE} push REPOSITORY=${repo}")
				}
			}
			parallel pubSteps
		}

		stage('Promote to staging') {
			sh("${MAKE} version.yaml REPOSITORY=${global.PUBLISHER_STAGING}")
			archiveArtifacts artifacts: 'version.yaml'
			build job: env.GLOBAL_ACCEPTANCE_JOB, parameters: [
				text(name: 'VERSION', value: readFile('version.yaml'))
			]
		}
	}
}
